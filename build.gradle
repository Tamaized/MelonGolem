plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

repositories {
    maven {
        url = "https://maven.blamejared.com/" // JEI
    }
    maven {
        name 'tterrag\'s Maven' // Mappings
        url 'https://maven.tterrag.com/'
    }
}

version = "${minecraft_version}-${mod_major_version}." + (hasProperty("CIVersion") ? CIVersion : mod_version)
group = "tamaized.melongolem"
archivesBaseName = "MelonMod"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

    configureEach {
        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run')

        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'
    }

    server {
        workingDirectory project.file('run')

        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"

    //implementation fg.deobf("mezz.jei:${project.jei_version}")
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand([
                'version': "${project.version}"
        ])
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "Melon Golem",
                    "Specification-Vendor"    : "Tamaized",
                    "Specification-Version"   : "${version}",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "Tamaized",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

jar.finalizedBy('reobfJar')

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'tamaized'
            setArtifactId 'melongolem'
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

task sourceJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}